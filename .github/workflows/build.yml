name: C/C++ CI

on:
  push:
    branches: [master]
    paths-ignore:
      - '**.md'

  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  windows:
    name: 'Windows'
    runs-on: windows-2019

    env:
      solution: 'msvc/ReHLDS.sln'
      buildPlatform: 'Win32'
      buildRelease: 'Release'
      buildReleasePlay: 'Release Play'
      buildTest: 'Test Fixes'

    steps:
      - name: Configure
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build
        run: |
          msbuild ${{ env.solution }} -p:Configuration="${{ env.buildRelease }}" /t:Clean,Build /p:Platform=${{ env.buildPlatform }} /p:PlatformToolset=v140_xp /p:XPDeprecationWarning=false
          msbuild ${{ env.solution }} -p:Configuration="${{ env.buildReleasePlay }}" /t:Clean,Build /p:Platform=${{ env.buildPlatform }} /p:PlatformToolset=v140_xp /p:XPDeprecationWarning=false

      - name: Get rcedit from chocolatey
        run: |
          choco install rcedit -y
        shell: "pwsh"

      - name: Move files
        run: |
          mkdir publish\debug
          mkdir publish\tests
          mkdir publish\bin\win32\svencoop\dlls
          move "msvc\${{ env.buildReleasePlay }}\swds.dll" publish\tests\swds.dll
          move msvc\${{ env.buildRelease }}\hlds.exe publish\bin\win32\hlds.exe
          move msvc\${{ env.buildRelease }}\hltv.exe publish\bin\win32\hltv.exe
          move msvc\${{ env.buildRelease }}\swds.dll publish\bin\win32\swds.dll
          move msvc\${{ env.buildRelease }}\core.dll publish\bin\win32\core.dll
          move msvc\${{ env.buildRelease }}\proxy.dll publish\bin\win32\proxy.dll
          move msvc\${{ env.buildRelease }}\demoplayer.dll publish\bin\win32\demoplayer.dll
          move msvc\${{ env.buildRelease }}\filesystem_stdio.dll publish\bin\win32\filesystem_stdio.dll
          move msvc\${{ env.buildRelease }}\director.dll publish\bin\win32\svencoop\dlls\director.dll
          move msvc\${{ env.buildRelease }}\hlds.pdb publish\debug\hlds.pdb
          move msvc\${{ env.buildRelease }}\hltv.pdb publish\debug\hltv.pdb
          move msvc\${{ env.buildRelease }}\swds.pdb publish\debug\swds.pdb
          move msvc\${{ env.buildRelease }}\core.pdb publish\debug\core.pdb
          move msvc\${{ env.buildRelease }}\proxy.pdb publish\debug\proxy.pdb
          move msvc\${{ env.buildRelease }}\demoplayer.pdb publish\debug\demoplayer.pdb
          move msvc\${{ env.buildRelease }}\filesystem_stdio.pdb publish\debug\filesystem_stdio.pdb
          move msvc\${{ env.buildRelease }}\director.pdb publish\debug\director.pdb

      # TODO: Set version to exe dynamicly: 0.0.0.0 to normal version such as at linux
      - name: Edit resources at windows binaries
        run: |
         rcedit ${{ github.workspace }}\publish\bin\win32\hlds.exe --set-version-string ProductName "ReHLDS" --set-file-version "0.0.0.0" --set-product-version "0.0.0.0" --set-version-string FileDescription "The Half-Life Dedicated Server, Commit: $env:GITHUB_SHA" --set-version-string "Comments" "Commit: $env:GITHUB_SHA" --set-version-string CompanyName "ReHLDS Dev Team" --set-version-string LegalCopyright "Copyright 2025 Valve, ReHLDS DevTeam"
         rcedit ${{ github.workspace }}\publish\bin\win32\hltv.exe --set-version-string ProductName "ReHLTV" --set-file-version "0.0.0.0" --set-product-version "0.0.0.0" --set-version-string FileDescription "The Half-Life TV, Commit: $env:GITHUB_SHA" --set-version-string "Comments" "Commit: $env:GITHUB_SHA" --set-version-string CompanyName "ReHLDS Dev Team" --set-version-string LegalCopyright "Copyright 2025 Valve, ReHLDS DevTeam"
         rcedit ${{ github.workspace }}\publish\tests\swds.dll --set-version-string ProductName "swds.dll" --set-file-version "0.0.0.0" --set-product-version "0.0.0.0" --set-version-string FileDescription "A dll used by Steamworks Dedicated Servers, Commit: $env:GITHUB_SHA" --set-version-string "Comments" "Commit: $env:GITHUB_SHA" --set-version-string CompanyName "ReHLDS Dev Team" --set-version-string LegalCopyright "Copyright 2025 Valve, ReHLDS DevTeam" --set-icon rehlds/dedicated/msvc/icon.ico
         rcedit ${{ github.workspace }}\publish\bin\win32\swds.dll --set-version-string ProductName "swds.dll" --set-file-version "0.0.0.0" --set-product-version "0.0.0.0" --set-version-string FileDescription "A ddll used by Steamworks Dedicated Servers, Commit: $env:GITHUB_SHA" --set-version-string "Comments" "Commit: $env:GITHUB_SHA" --set-version-string CompanyName "ReHLDS Dev Team" --set-version-string LegalCopyright "Copyright 2025 Valve, ReHLDS DevTeam" --set-icon rehlds/dedicated/msvc/icon.ico
         rcedit ${{ github.workspace }}\publish\bin\win32\core.dll --set-version-string ProductName "core.dll" --set-file-version "0.0.0.0" --set-product-version "0.0.0.0" --set-version-string FileDescription " A dll, it is a core of game engine, Commit: $env:GITHUB_SHA" --set-version-string "Comments" "Commit: $env:GITHUB_SHA" --set-version-string CompanyName "ReHLDS Dev Team" --set-version-string LegalCopyright "Copyright 2025 Valve, ReHLDS DevTeam" --set-icon rehlds/dedicated/msvc/icon.ico
         rcedit ${{ github.workspace }}\publish\bin\win32\proxy.dll --set-version-string ProductName "proxy.dll" --set-file-version "0.0.0.0" --set-product-version "0.0.0.0" --set-version-string FileDescription "A dll for proxying network connections, Commit: $env:GITHUB_SHA" --set-version-string "Comments" "Commit: $env:GITHUB_SHA" --set-version-string CompanyName "ReHLDS Dev Team" --set-version-string LegalCopyright "Copyright 2025 Valve, ReHLDS DevTeam" --set-icon rehlds/dedicated/msvc/icon.ico
         rcedit ${{ github.workspace }}\publish\bin\win32\demoplayer.dll --set-version-string ProductName "demoplayer.dll" --set-file-version "0.0.0.0" --set-product-version "0.0.0.0" --set-version-string FileDescription "A dll for demoplayer functionality, Commit: $env:GITHUB_SHA" --set-version-string "Comments" "Commit: $env:GITHUB_SHA" --set-version-string CompanyName "ReHLDS Dev Team" --set-version-string LegalCopyright "Copyright 2025 Valve, ReHLDS DevTeam" --set-icon rehlds/dedicated/msvc/icon.ico
         rcedit ${{ github.workspace }}\publish\bin\win32\filesystem_stdio.dll --set-version-string ProductName "filesystem_stdio.dll" --set-file-version "0.0.0.0" --set-product-version "0.0.0.0" --set-version-string FileDescription "A dll that manages file input/output operations, Commit: $env:GITHUB_SHA" --set-version-string "Comments" "Commit: $env:GITHUB_SHA" --set-version-string CompanyName "ReHLDS Dev Team" --set-version-string LegalCopyright "Copyright 2025 Valve, ReHLDS DevTeam" --set-icon rehlds/dedicated/msvc/icon.ico
         rcedit ${{ github.workspace }}\publish\bin\win32\svencoop\dlls\director.dll --set-version-string ProductName "director.dll" --set-file-version "0.0.0.0" --set-product-version "0.0.0.0" --set-version-string FileDescription "A dll used for Director functionality in Half-Life 1, Commit: $env:GITHUB_SHA" --set-version-string "Comments" "Commit: $env:GITHUB_SHA" --set-version-string CompanyName "ReHLDS Dev Team" --set-version-string LegalCopyright "Copyright 2025 Valve, ReHLDS DevTeam" --set-icon rehlds/dedicated/msvc/icon.ico
        shell: "pwsh"

      - name: Deploy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: win32
          path: publish/*


  linux:
    name: 'Linux'
    runs-on: ubuntu-24.04
    container: debian:11-slim

    steps:
      - name: Install dependencies
        run: |
          dpkg --add-architecture i386
          apt-get update
          apt-get install -y \
            gcc-multilib g++-multilib \
            build-essential \
            libc6-dev libc6-dev-i386 \
            git cmake rsync \
            g++ gcc

      - name: Configure
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Build using GCC Compiler
        run: ls && ./build.sh --compiler=gcc

      - name: Prepare HLSDK
        run: |
          mkdir -p publish/hlsdk
          rsync -a rehlds/common/ publish/hlsdk/common/
          rsync -a rehlds/dlls/ publish/hlsdk/dlls/
          rsync -a rehlds/pm_shared/ publish/hlsdk/pm_shared/
          rsync -a rehlds/public/ publish/hlsdk/public/ --exclude rehlds/
          rsync -a rehlds/public/rehlds/ publish/hlsdk/engine

      - name: Move files
        run: |
          mkdir -p publish/bin/linux32/svencoop/dlls
          mv build/rehlds/engine_i486.so publish/bin/linux32/engine_i486.so
          mv rehlds/version/appversion.h publish/appversion.h
          mv build/rehlds/dedicated/hlds_linux publish/bin/linux32/hlds_linux
          mv build/rehlds/HLTV/Console/hltv publish/bin/linux32/hltv
          mv build/rehlds/HLTV/Core/core.so publish/bin/linux32/core.so
          mv build/rehlds/HLTV/Proxy/proxy.so publish/bin/linux32/proxy.so
          mv build/rehlds/HLTV/DemoPlayer/demoplayer.so publish/bin/linux32/demoplayer.so
          mv build/rehlds/HLTV/Director/director.so publish/bin/linux32/svencoop/dlls/director.so
          mv build/rehlds/filesystem/FileSystem_Stdio/filesystem_stdio.so publish/bin/linux32/filesystem_stdio.so

      - name: Run GLIBC/ABI version compat test
        run: |
          binaries=(
            "publish/bin/linux32/engine_i486.so"
            "publish/bin/linux32/hlds_linux"
            "publish/bin/linux32/hltv"
            "publish/bin/linux32/core.so"
            "publish/bin/linux32/proxy.so"
            "publish/bin/linux32/demoplayer.so"
            "publish/bin/linux32/svencoop/dlls/director.so"
            "publish/bin/linux32/filesystem_stdio.so"
          )
          bash ./rehlds/version/glibc_test.sh ${binaries[@]}
          if [[ $? -ne 0 ]]; then
            exit 1 # Assertion failed
          fi
        shell: bash

      - name: Deploy artifacts
        uses: actions/upload-artifact@v4
        id: upload-job
        with:
          name: linux32
          path: publish/*

  publish:
    name: 'Publish'
    runs-on: ubuntu-24.04
    needs: [windows, linux]

    steps:
      - name: Deploying linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux32

      - name: Deploying windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: win32

      - name: Reading appversion.h
        run: |
          if [ -e appversion.h ]; then
            APP_VERSION=$(cat appversion.h | grep -wi '#define APP_VERSION_STRD' | sed -e 's/#define APP_VERSION_STRD[ \t\r\n\v\f]\+\(.*\)/\1/i' -e 's/\r//g')
            if [ $? -ne 0 ]; then
              APP_VERSION=""
            else
              # Remove quotes
              APP_VERSION=$(echo $APP_VERSION | xargs)
              echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
            fi
          fi
          rm -f appversion.h

      - name: Publish artifacts
        uses: softprops/action-gh-release@v2
        id: publish-job
        if: |
          startsWith(github.ref, 'refs/tags/') &&
          steps.packaging-job.outcome == 'success'
        with:
          files: |
            *.zip
            *.7z
        env:
          GITHUB_TOKEN: ${{ secrets.API_TOKEN }}
